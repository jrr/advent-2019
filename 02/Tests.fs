module Tests

open System
open Xunit
open FsUnit.Xunit
open Solve


let becomes a b = b |> solve |> Seq.map (sprintf "%d") |> (String.concat ",") |> should equal a
    
[<Fact>]
let ``solves example`` () =
    "1,9,10,3,2,3,11,0,99,30,40,50"
        |> becomes "3500,9,10,70,2,3,11,0,99,30,40,50"
        
[<Fact>]
let ``solves other given examples`` () =
    
    "1,0,0,0,99" |> becomes "2,0,0,0,99"
    "2,3,0,3,99" |> becomes "2,3,0,6,99"
    "2,4,4,5,99,0" |> becomes "2,4,4,5,99,9801"
    "1,1,1,4,99,5,6,0,99" |> becomes "30,1,1,4,2,5,6,0,99"

let problemInput = "1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,10,1,19,1,19,9,23,1,23,6,27,2,27,13,31,1,10,31,35,1,10,35,39,2,39,6,43,1,43,5,47,2,10,47,51,1,5,51,55,1,55,13,59,1,59,9,63,2,9,63,67,1,6,67,71,1,71,13,75,1,75,10,79,1,5,79,83,1,10,83,87,1,5,87,91,1,91,9,95,2,13,95,99,1,5,99,103,2,103,9,107,1,5,107,111,2,111,9,115,1,115,6,119,2,13,119,123,1,123,5,127,1,127,9,131,1,131,10,135,1,13,135,139,2,9,139,143,1,5,143,147,1,13,147,151,1,151,2,155,1,10,155,0,99,2,14,0,0"
[<Fact>]
let ``solves 2A`` () =

    solveWithParams problemInput 12 2
        |> Seq.head
        |> should equal 4462686
    
    
[<Fact>]
let ``replace`` () =
    replace [1;2;3;4;5] 2 99 |> List.ofSeq |> should equal [1;2;99;4;5]

[<Fact(Skip="slow")>]
let ``solve 2B`` () =
    tryParams problemInput |> should equal (Some (59,36))
    
    

[<Fact>]
let ``example program with IO`` () =
    let mutable output : int list = []
    let testIo : IOFunctions = {
        InputFunction = fun () -> 23
        OutputFunction = (fun x ->
            output <- List.append output [x])
    }
    let result = solveWithIO "3,0,4,0,99" testIo
    result |> ignore
    output |> should equal [23]


let input5a = "3,225,1,225,6,6,1100,1,238,225,104,0,1102,91,92,225,1102,85,13,225,1,47,17,224,101,-176,224,224,4,224,1002,223,8,223,1001,224,7,224,1,223,224,223,1102,79,43,225,1102,91,79,225,1101,94,61,225,1002,99,42,224,1001,224,-1890,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,102,77,52,224,1001,224,-4697,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,45,47,225,1001,43,93,224,1001,224,-172,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,1102,53,88,225,1101,64,75,225,2,14,129,224,101,-5888,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,101,60,126,224,101,-148,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,82,56,224,1001,224,-4592,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1101,22,82,224,1001,224,-104,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,107,226,677,224,102,2,223,223,1006,224,374,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,404,101,1,223,223,7,677,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1108,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,464,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,108,226,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,1107,677,677,224,102,2,223,223,1005,224,584,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,599,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,629,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,659,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226"

[<Fact>]
let ``solves 5A`` () =
    let mutable output : int list = []
    let testIo : IOFunctions = {
        InputFunction = fun () -> 1
        OutputFunction = (fun x ->
            output <- List.append output [x])
    }
    let result = solveWithIO input5a testIo
    result |> ignore
    let outputs = output |> Seq.take (output.Length - 1) |> Seq.toList
    let final = output |> Seq.skip (output.Length - 1) |> Seq.head
    outputs |> List.distinct |> should equal [0]
    final |> should equal 16489636
    
[<Fact>]
let ``solves 5B`` () =
    let mutable output : int list = []
    let testIo : IOFunctions = {
        InputFunction = fun () -> 5
        OutputFunction = (fun x ->
            output <- List.append output [x])
    }
    let result = solveWithIO input5a testIo
    result |> ignore
    let outputs = output |> Seq.take (output.Length - 1) |> Seq.toList
    let final = output |> Seq.skip (output.Length - 1) |> Seq.head
    outputs |> List.distinct |> should equal [0]
    final |> should equal "foo"
